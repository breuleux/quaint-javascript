
require-macros:
   earl-mocha ->
      describe, it, before, after
      before-each, after-each
      xdescribe, xit
      assert, asserts
      expect-error

require:
   ../src as qjs ->
      JavaScriptEvaluator
   quaint -> create



describe "JavaScriptEvaluator":

   before-each:
      @je = JavaScriptEvaluator{}

   it "evaluates simple expressions":
      assert @je.eval{"1 + 2 + 3"} === 6

   it "has access to global object":
      assert @je.eval{"parseFloat('6.7')"} === 6.7

   it "accepts custom context":
      je = JavaScriptEvaluator{{ziff = 777}}
      assert je.eval{"ziff - 7"} === 770


describe "quaint integration":

   before-each:
      @q = quaint.create{qjs}
      @q.setenv{"a", 555}

   it "simple expressions":
      assert @q.translate{"1 + 1 = {1 + 1}", .html} === "1 + 1 = 2"

   it "more complicated expressions":
      assert @q.translate{"{var a = 6 + 6; a}", .html} === "12"

   it "declare and use variables":
      assert @q.translate{"{var a = 6 + 6}Twelve is {a}", .html} === "Twelve is 12"

   it "declare and use macros":
      assert @q.translate{"{function foo() {return 'x';}}[foo::]", .html} === "x"
      assert @q.translate{s, .html}.trim{} === "<sup>x</sup>" where s = """
      {
         function sup(engine, body) {
            return ENode(['sup'], {}, [engine.gen(body)]);
         }
      }
      sup :: x
      """

   it "h function":
      assert @q.translate{s, .html}.trim{} === result where
         s = """
         {
            function sup(engine, body) {
               return h('div', {id: 'important'}, h('sup.cls', engine.gen(body), 'X'));
            }
         }
         sup :: _x
         """
         result =
            '<div id="important"><sup class="cls"><em>x</em>X</sup></div>'
