
require: vm

class JavaScriptEvaluator:
   constructor{@store = Object.create{global}, @vm = vm} =
      @setenv{"h", h} where h{tag, match props, *children} =
         {tags => _, props => _, children => _} or String? or Number? or Boolean? ->
            h{tag, {=}, props, *children}
         else ->
            ENode{tag.split{R"(?=\W)"}, props, children}
      @store and @ctx = @vm.create-context{@store}
   eval{code, env = {=}, loc = null} =
      @store &: env
      @vm.run-in-context{code, @store}
   setenv{key, value} =
      @store[key] = value
   fork{} =
      JavaScriptEvaluator{
         Object.create{@store}
         @vm
      }

provide:
   JavaScriptEvaluator

main{*match} =
   {[@] and {is-quaint-engine => true?}, options = {=}} ->
      @evaluator = JavaScriptEvaluator{
         options.sandbox or Object.create{global}
         options.vm or vm
      }
   {options = {=}} ->
      {@} -> main{@, options}

provide = main

