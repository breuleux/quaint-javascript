
require: vm

class JavaScriptEvaluator:
   constructor{options = {=}} =
      [@] &: options
      @sandbox or= Object.create{global}
      @vm or= vm
      @setenv{"h", h} where h{tag, match props, *children} =
         {tags => _, props => _, children => _} or String? or Number? or Boolean? ->
            h{tag, {=}, props, *children}
         else ->
            ENode{tag.split{R"(?=\W)"}, props, children}
      @sandbox = @vm.create-context{@sandbox}
   eval{var code, env = {=}, loc = null} =
      if @transform:
         code = @transform{code}
      @sandbox &: env
      @vm.run-in-context{code, @sandbox}
   setenv{key, value} =
      @sandbox[key] = value
   fork{} =
      JavaScriptEvaluator{
         sandbox = Object.create{@sandbox}
         vm = @vm
         transform = @transform
      }

provide:
   JavaScriptEvaluator

main{*match} =
   {@, options = {=}} when @is-quaint-engine ->
      @evaluator = JavaScriptEvaluator{options}
   {options = {=}} ->
      {@} -> main{@, options}

provide = main

